import abc


class TokenType(abc.ABC):
    """Класс, описывающий общий тип токена. Является абстрактным классом"""

    def __init__(self, name: str, regex: str):
        """Конструктор класса TokenType. Инициализирует новый экземпляр типа токена
        именем типа, регуляркой, задающим этот тип"""
        self.name = name
        self.regex = regex

    def return_regex(self) -> str:
        """Метод, возвращающий регулярное выражение, задающее тип токена"""
        return self.regex


class Variable(TokenType):
    """Класс, описывающий тип токена <переменная>"""

    def __init__(self):
        """Конструктор класса Variable. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Variable', r'[a-zA-Z_]\w*')


class Number(TokenType):
    """Класс, описывающий тип токена <число>"""

    def __init__(self):
        """Конструктор класса Number. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Variable', r'[a-zA-Z_]\w*')


