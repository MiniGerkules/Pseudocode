import abc


class TokenType(abc.ABC):
    """Класс, описывающий общий тип токена. Является абстрактным классом"""

    def __init__(self, name: str, regex: str):
        """Конструктор класса TokenType. Инициализирует новый экземпляр типа токена
        именем типа, регуляркой, задающим этот тип"""
        self.name = name
        self.regex = regex

    def return_regex(self) -> str:
        """Метод, возвращающий регулярное выражение, задающее тип токена"""
        return self.regex


class Variable(TokenType):
    """Класс, описывающий тип токена <переменная>"""

    def __init__(self):
        """Конструктор класса Variable. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Variable', r'[a-zA-Z_]\w*')


class Number(TokenType):
    """Класс, описывающий тип токена <число>"""

    def __init__(self):
        """Конструктор класса Number. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Variable', r'[1-9]+(\.\d+)?')


class EndOfString(TokenType):
    """Класс, описывающий тип токена <завершение строки>"""

    def __init__(self):
        """Конструктор класса EndOfString. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('EndOfString', '\n')


class Space(TokenType):
    """Класс, описывающий тип токена <пробел>"""

    def __init__(self):
        """Конструктор класса Space. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Space', '[ \t]+')


class Assign(TokenType):
    """Класс, описывающий тип токена <равно>"""

    def __init__(self):
        """Конструктор класса Assign. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Assign', r'=')


class Print(TokenType):
    """Класс, описывающий тип токена <вывод>"""

    def __init__(self):
        """Конструктор класса Print. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Print', r'ВЫВОД')


class Plus(TokenType):
    """Класс, описывающий тип токена <плюс>"""

    def __init__(self):
        """Конструктор класса Plus. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Plus', r'\+')


class Minus(TokenType):
    """Класс, описывающий тип токена <минус>"""

    def __init__(self):
        """Конструктор класса Minus. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Minus', r'-')


class Multiply(TokenType):
    """Класс, описывающий тип токена <умножить>"""

    def __init__(self):
        """Конструктор класса Minus. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Minus', r'\*')


class Divide(TokenType):
    """Класс, описывающий тип токена <разделить>"""

    def __init__(self):
        """Конструктор класса Divide. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Divide', r'/')


class Remainder(TokenType):
    """Класс, описывающий тип токена <остаток от деления>"""

    def __init__(self):
        """Конструктор класса Remainder. Задает через родительский конструктор имя
        токена и регулярку, определяющую этот токен"""
        super().__init__('Remainder', r'%')
